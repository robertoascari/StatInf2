---
title: "Script 5 - MCMC - Stan"
author: "Roberto Ascari"
format: html
editor: visual
toc: true
---

You can download the `R` script [here](data/Script1_BernoulliBeta.R).

Some useful links for working with Stan:

-   [List](https://mc-stan.org/users/interfaces/) of Language-Specific Stan Interfaces.
 

-   [Rstan](https://mc-stan.org/users/interfaces/rstan): an interface to Stan for R.

-   [RStan: Getting Started](https://github.com/stan-dev/rstan/wiki/RStan-Getting-Started).

# LM

```{r}
#| echo: false
#| eval: true
#| include: false

library(tidyverse)
library(ggplot2)
library(rstan)
rstan_options(auto_write = TRUE)
library(loo)
library(car)
```

In this part, we are going to fit a simple linear regression model through Stan. [Here](data/LM_Model.stan) you can download the `.stan` model.

First of all, let's compile the model and save it into an R object.

```{r}
#| echo: true
#| eval: true

LM_Model <- rstan::stan_model(file="data/LM_Model.stan")

LM_Model
```

We consider the `Prestige` data from the `car` package. Statistical units are occupations, for which we have:

-   `education`: average education of occupational incumbents, years, in 1971;

-   `income`: average income of incumbents, dollars, in 1971;

-   `women`: percentage of incumbents who are women;

-   `prestige`: Pineo-Porter prestige score for occupation, from a social survey conducted in the mid-1960s;

-   `census`: canadian Census occupational code;

-   `type`: type of occupation (`bc`, Blue Collar; `prof`, Professional, Managerial, and Technical; `wc`, White Collar).

Let's transform the `income` variable so to reduce the asimmetry.

```{r}
#| echo: true
#| eval: true

data("Prestige")

Prestige2 <-
  Prestige[complete.cases(Prestige),-5]
Prestige2$income <- log(Prestige2$income)
```

In order to fit the stan model, we need to pass some data: - `y`: the response vector;

-   `X`: the design matrix;

-   `n`: the sample size;

-   `K`: the number of covariates (including the intercept term);

-   `a0`, `b0`, `beta0`, `s2_0`: hyperparameters.

```{r}
#| echo: true
#| eval: true

y <- Prestige2$prestige
mod <- lm(prestige ~ ., data=Prestige2)

X <- model.matrix(mod)
n <- nrow(X)
K <- ncol(X)
```

We further create a list containing the objects to be passed to the stan model.

```{r}
#| echo: true
#| eval: true

data.stan <- list(
  y = y,
  X = X,
  n = n,
  K = K,
  a0 = 10,
  b0 = 10,
  beta0 = rep(0, K),
  s2_0 = rep(10, K)
) 
```

We can now use the `rstan::sampling` function to fit the model. We what two chains, each of length 10'000, and we want to discard the first 50% as warm-up.

```{r}
#| echo: true
#| eval: true

n.iter <- 10000
nchain <- 2

LM_stan <- rstan::sampling(
  object = LM_Model,
  data = data.stan,
  warmup = 0.5*n.iter, 
  iter = n.iter,
  thin=1, chains = nchain,
  refresh = n.iter/2     
  #, pars=c("beta", "sigma2")
  )
```

```{r}
#| echo: true
#| eval: true

summ <- summary(LM_stan, pars = c("beta", "sigma2"))$summary

rownames(summ)[1:K] <- colnames(X)
round(summ, 3)
```

Traceplots:

```{r}
#| echo: true
#| eval: true

rstan::traceplot(LM_stan, pars = c('beta', 'sigma2'), inc_warmup = TRUE)
rstan::traceplot(LM_stan, pars = c('beta', 'sigma2'), inc_warmup = FALSE)
```

```{r}
#| echo: true
#| eval: true

post_chain <- rstan::extract(LM_stan, c('beta', 'sigma2')) 
betas <- post_chain$beta
colnames(betas) <- colnames(X)

sigma2 <- post_chain$sigma2

df_plot <- 
  data.frame(value = c(
    betas[,1], betas[,2], betas[,3],
    betas[,4], betas[,5], betas[,6],
    sigma2), 
    param = rep(c(colnames(X), 'sigma2'), 
                each = nrow(post_chain$beta)))


df_plot %>% 
  ggplot(aes(value, fill = param)) + 
  geom_density() + 
  facet_wrap(~param, scales = 'free') + 
  theme_minimal() + 
  theme(legend.position="false")
```

```{r}
#| echo: true
#| eval: true

acf(betas[,1])
acf(betas[,2])
acf(betas[,3])
acf(betas[,4])
acf(betas[,5])
acf(betas[,5])
acf(betas[,6])
acf(sigma2)
```

As classical MCMCs, we can use the sampled values to approximate any quantity of interest. For example, we can approximate $\mathbb{P}(\beta_1 > 4, \beta_3 > -0.5)$:

```{r}
#| echo: true
#| eval: true

mean(betas[,2] > 4 & betas[,4] > -.5)
```

# Logistic Regression

Let's consider the [logistic regression model](https://robertoascari.github.io/StatInf2/Script4.html#metropolis-hasting-for-a-logistic-regression-model) to the [cardiac dataset](data/cardiac.csv).

The `Logistic_Model.stan` model can be downloaded [here](data/Logistic_Model.stan).

```{r}
#| echo: true
#| eval: true

rm(list = ls())
cardiac <- read.csv("data/cardiac.csv", header=T, sep=";")

y <- cardiac$Chd
X <- model.matrix(lm(Chd ~ ., data=cardiac))
n <- nrow(X)
K <- ncol(X)
```

```{r}
#| echo: true
#| eval: true

Logistic_Model <-
  rstan::stan_model(file="data/Logistic_Model.stan")

Logistic_Model
```

```{r}
#| echo: true
#| eval: true

data.stan_logis <- list(
  y = y,
  X = X,
  n = n,
  K = K,
  beta0 = rep(0, K),
  s2_0 = rep(10, K)
) 
```

```{r}
#| echo: true
#| eval: true

n.iter <- 10000
nchain <- 2

Logistic_stan <- rstan::sampling(
  object = Logistic_Model,
  data = data.stan_logis,
  warmup = 0.5*n.iter, iter = n.iter,
  thin = 1, chains = nchain,
  refresh = n.iter/2
)
```

```{r}
#| echo: true
#| eval: true

summ <- summary(Logistic_stan, pars = "beta")$summary
rownames(summ)[1:K] <- colnames(X)
round(summ, 3)
```

```{r}
#| echo: true
#| eval: true

rstan::traceplot(Logistic_stan, pars = "beta", inc_warmup = TRUE)
rstan::traceplot(Logistic_stan, pars = "beta", inc_warmup = FALSE)
```

```{r}
#| echo: true
#| eval: true

post_chain <- rstan::extract(Logistic_stan, "beta") 
betas <- post_chain$beta
colnames(betas) <- colnames(X)

df_plot <- 
  data.frame(value = c(betas[,1], betas[,2]), 
             param = rep(colnames(X), each = nrow(post_chain$beta)))

df_plot %>% 
  ggplot(aes(value, fill = param)) + 
  geom_density() + 
  facet_wrap(~param, scales = 'free') + 
  theme_minimal() + 
  theme(legend.position="false")
```

We can evaluate probabilities for each patients.

```{r}
#| echo: true
#| eval: true

probs_stan <- rstan::extract(Logistic_stan, "p")$p
plot(cardiac$Age, colMeans(probs_stan), pch=20, type="l")
plot(cardiac$Age, colMeans(probs_stan), pch=20)
```
